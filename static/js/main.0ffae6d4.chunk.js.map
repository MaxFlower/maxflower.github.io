{"version":3,"sources":["containers/Header/Header.module.scss","containers/Experience/Experience.module.scss","components/Badge/Badge.module.scss","components/MediaCard/MediaCard.module.scss","components/ContentRow/ContentRow.module.scss","containers/Contacts/Contacts.module.scss","App.module.scss","definitions/data.interfaces.ts","assets/data/static.ts","context/AppContext.ts","assets/data/static.ru.ts","api/internalAPI.ts","components/ContentRow/ContentRow.tsx","containers/Contacts/Contacts.tsx","components/Badge/Badge.tsx","containers/Skills/Skills.tsx","components/MediaCard/MediaCard.tsx","containers/Experience/Experience.tsx","containers/Header/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LANGUAGE","SkillCategory","DEFAULT_APP_CONTEXT","personalData","currentLanguage","EN","skills","labels","contactsLabels","email","phone","github","linkedin","sectionLabels","contacts","experience","projects","experienceLabels","company","companySite","location","industry","description","techStack","AppContext","React","createContext","OPTIONS","method","headers","Headers","mode","apiGet","url","a","fetch","response","console","log","json","fetchPersonData","fetchSkillLabels","memo","rowTitle","rowContent","className","styles","contentRow","Contacts","useContext","currentData","currentLabels","contactsSection","href","person","colorType","children","badge","Skills","map","item","key","name","bgUrl","mediaCard","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","Experience","useState","selectedId","setSelectedId","SwitchButton","index","handleClick","card","active","onClick","data-index","companyIcon","e","preventDefault","Number","currentTarget","getAttribute","experienceSection","verticalStepper","jobTitle","technologies","Header","onLanguageChange","languages","Object","values","currLanguage","language","data-lang","header","headerWrapper","headerTitle","firstName","lastName","langSwitcher","src","alt","title","App","setCurrentLanguage","setPersonalData","setSkills","updatePersonData","useCallback","personData","useEffect","init","Provider","value","selectedLanguage","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ffae6d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3MD_q\",\"headerWrapper\":\"Header_headerWrapper__11Dr0\",\"headerTitle\":\"Header_headerTitle__vUhpI\",\"langSwitcher\":\"Header_langSwitcher__3RR5V\",\"active\":\"Header_active__3r2j9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"verticalStepper\":\"Experience_verticalStepper__1jjYj\",\"card\":\"Experience_card__SWFfD\",\"active\":\"Experience_active__2jYE0\",\"experienceSection\":\"Experience_experienceSection__2SLhH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"Badge_badge__3px7Q\",\"positive\":\"Badge_positive__2z_c8\",\"negative\":\"Badge_negative__37irS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mediaCard\":\"MediaCard_mediaCard__3J7gs\",\"positive\":\"MediaCard_positive__1lRsV\",\"negative\":\"MediaCard_negative__1p0HK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contentRow\":\"ContentRow_contentRow__2xHwA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsSection\":\"Contacts_contactsSection__2daeo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","export enum LANGUAGE {\n  RU = 'ru',\n  EN = 'en',\n}\n\nexport type ElementColorType = 'positive' | 'negative';\n\nexport enum SkillCategory {\n  FRONTEND = 'frontend',\n  BACKEND = 'backend',\n  DEVELOPMENT = 'development',\n  OTHERS = 'others',\n}\n\nexport interface Experience {\n  company: string;\n  companyIcon: string;\n  url?: string;\n  industry: string;\n  jobTitle: string;\n  description: string;\n  location: string;\n  technologies: Skill[];\n}\n\nexport interface Project {\n  name: string;\n  projectIcon?: string;\n  description: string;\n  url: string;\n  technologies: Skill[];\n}\n\nexport interface Skill {\n  name: string;\n  skillCategory: SkillCategory;\n}\n\nexport interface Label {\n  contactsLabels: {\n    email: string;\n    phone: string;\n    github: string;\n    linkedin: string;\n  };\n  sectionLabels: {\n    contacts: string;\n    experience: string;\n    projects: string;\n    skills: string;\n  };\n  experienceLabels: {\n    company: string;\n    companySite: string;\n    location: string;\n    industry: string;\n    description: string;\n    techStack: string;\n  };\n}\n\nexport interface PersonData {\n  person: {\n    firstName: string;\n    lastName: string;\n    jobTitle: string;\n    email: string;\n    phone: string;\n    github: string;\n    linkedin: string;\n  };\n  experience: Experience[];\n  projects: Project[];\n}\n","import { Label } from '../../definitions/data.interfaces';\n\nexport const STATIC_DATA: Label = {\n  contactsLabels: {\n    email: 'E-mail',\n    phone: 'Phone',\n    github: 'Github',\n    linkedin: 'LinkedIn',\n  },\n  sectionLabels: {\n    contacts: 'Contacts',\n    experience: 'Experience',\n    projects: 'Projects',\n    skills: 'Skills',\n  },\n  experienceLabels: {\n    company: 'Company',\n    companySite: 'Company site',\n    location: 'Location',\n    industry: 'Industry',\n    description: 'Description',\n    techStack: 'Tech stack',\n  },\n};\n","import React from 'react';\nimport { Label, LANGUAGE, PersonData, Skill } from '../definitions/data.interfaces';\nimport { STATIC_DATA, STATIC_DATA_RU } from '../assets/data';\n\nexport interface AppContext {\n  personalData: { [language: string]: PersonData | undefined };\n  currentLanguage: LANGUAGE;\n  skills: Skill[];\n  labels: { [language: string]: Label };\n}\n\nexport const DEFAULT_APP_CONTEXT: AppContext = {\n  personalData: {},\n  currentLanguage: LANGUAGE.EN,\n  skills: [],\n  labels: {\n    'ru': STATIC_DATA_RU,\n    'en': STATIC_DATA,\n  },\n};\n\nexport const AppContext = React.createContext(DEFAULT_APP_CONTEXT);\n","import { Label } from '../../definitions/data.interfaces';\n\nexport const STATIC_DATA_RU: Label = {\n  contactsLabels: {\n    email: 'Почта',\n    phone: 'Телефон',\n    github: 'Github',\n    linkedin: 'LinkedIn',\n  },\n  sectionLabels: {\n    contacts: 'Контакты',\n    experience: 'Опыт',\n    projects: 'Проекты',\n    skills: 'Навыки',\n  },\n  experienceLabels: {\n    company: 'Компания',\n    companySite: 'Сайт',\n    location: 'Место',\n    industry: 'Направление',\n    description: 'Описание',\n    techStack: 'Технологии',\n  },\n};\n","import { PersonData, Skill } from '../definitions/data.interfaces';\n\nconst API_URL = 'https://raw.githubusercontent.com/maxflower/mt-profile/master/json';\nconst OPTIONS = {\n  method: 'GET',\n  headers: new Headers({'content-type': 'application/json'}),\n  mode: 'cors' as RequestMode\n};\n\nconst apiGet = async <T>(url: string): Promise<T> => {\n  const response = await fetch(API_URL + url, OPTIONS);\n\n  console.log(response)\n\n  return response.json();\n};\n\nconst fetchPersonData = async (url: string) => {\n  return apiGet<PersonData>(`/${url}/person.json`);\n};\n\nconst fetchSkillLabels = async () => {\n  return apiGet<Skill[]>('/skills.json');\n};\n\nexport { fetchPersonData, fetchSkillLabels };\n","import React from 'react';\nimport styles from './ContentRow.module.scss';\n\ninterface ContentRowProps extends Pick<React.HTMLAttributes<HTMLDivElement>, 'id' | 'className'> {\n  rowTitle: React.ReactNode;\n  rowContent: React.ReactNode;\n}\n\nconst ContentRow: React.FC<ContentRowProps> = ({ rowTitle, rowContent, className = '' }) => {\n  return (\n    <div className={`${styles.contentRow} ${className}`}>\n      <div>{rowTitle}:</div>\n      <div>{rowContent}</div>\n    </div>\n  );\n};\n\nexport default React.memo(ContentRow);\n","import React, { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport ContentRow from '../../components/ContentRow/ContentRow';\nimport styles from './Contacts.module.scss';\n\nexport const Contacts: React.FC = () => {\n  const { personalData, labels, currentLanguage } = useContext(AppContext);\n  const currentData = personalData[currentLanguage];\n  const currentLabels = labels[currentLanguage];\n\n  return (\n    <div className={styles.contactsSection}>\n      <h3>{currentLabels.sectionLabels.contacts}</h3>\n      {currentData &&\n      <section>\n        <ContentRow\n          rowTitle={currentLabels.contactsLabels.email}\n          rowContent={<a href={`mailto:${currentData.person.email}`}>{currentData.person.email}</a>}\n        />\n        <ContentRow rowTitle={currentLabels.contactsLabels.phone} rowContent={currentData.person.phone} />\n        <ContentRow\n          rowTitle={currentLabels.contactsLabels.github}\n          rowContent={<a href={currentData.person.github}>{currentData.person.github}</a>}\n        />\n        <ContentRow\n          rowTitle={currentLabels.contactsLabels.linkedin}\n          rowContent={<a href={currentData.person.linkedin}>{currentData.person.linkedin}</a>}\n        />\n      </section>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { ElementColorType } from '../../definitions/data.interfaces';\nimport styles from './Badge.module.scss';\n\ninterface BadgeProps extends Pick<React.HTMLAttributes<HTMLDivElement>, 'children' | 'className'> {\n  colorType?: ElementColorType;\n}\n\nconst Badge: React.FC<BadgeProps> = ({ colorType = 'negative', className = '', children }) => {\n  return <div className={`${styles.badge} ${styles[colorType]} ${className}`}>{children}</div>;\n};\n\nexport default React.memo(Badge);\n","import React, { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport Badge from '../../components/Badge/Badge';\n\nexport const Skills: React.FC = () => {\n  const { labels, skills, currentLanguage } = useContext(AppContext);\n\n  return (\n    <div>\n      <h3>{labels[currentLanguage].sectionLabels.skills}</h3>\n      <div>\n        {skills.map((item) => (\n          <Badge key={item.name}>{item.name}</Badge>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { ElementColorType } from '../../definitions/data.interfaces';\nimport styles from './MediaCard.module.scss';\n\ninterface MediaCardProps extends Pick<React.HTMLAttributes<HTMLDivElement>, 'className'> {\n  colorType?: ElementColorType;\n  bgUrl?: string;\n}\n\nconst MediaCard: React.FC<MediaCardProps> = ({ colorType = 'positive', className = '', bgUrl }) => {\n  return (\n    <div\n      className={`${styles.mediaCard} ${styles[colorType]} ${className}`}\n      style={{\n        backgroundImage: `url('${bgUrl}')`,\n        backgroundPosition: 'center',\n        backgroundSize: 'contain',\n        backgroundRepeat: 'no-repeat',\n      }}\n    />\n  );\n};\n\nexport default React.memo(MediaCard);\n","import React, { useState, useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport { Experience as ExperienceItem } from '../../definitions/data.interfaces';\nimport MediaCard from '../../components/MediaCard/MediaCard';\nimport ContentRow from '../../components/ContentRow/ContentRow';\nimport Badge from '../../components/Badge/Badge';\nimport styles from './Experience.module.scss';\n\nexport const Experience: React.FC = () => {\n  const [selectedId, setSelectedId] = useState(0);\n  const { personalData, labels, currentLanguage } = useContext(AppContext);\n  const currentData = personalData[currentLanguage];\n  const currentLabels = labels[currentLanguage];\n\n  const SwitchButton = React.memo<{\n    index: number;\n    handleClick: (e: React.MouseEvent<HTMLElement>) => void;\n    item: ExperienceItem;\n  }>(function SwitchButton({ index, handleClick, item }) {\n    return (\n      <button\n        className={`${styles.card} ${selectedId === index ? styles.active : ''}`}\n        onClick={handleClick}\n        data-index={index}\n      >\n        <MediaCard bgUrl={`/img/${item.companyIcon}`} />\n      </button>\n    );\n  });\n\n  const handleClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    setSelectedId(Number(e.currentTarget.getAttribute('data-index')));\n  };\n\n  return (\n    <div className={styles.experienceSection}>\n      <h3>{currentLabels.sectionLabels.experience}</h3>\n      {currentData && (\n        <>\n          <div className={styles.verticalStepper}>\n            {currentData.experience.map((item: ExperienceItem, index) => (\n              <SwitchButton index={index} handleClick={handleClick} item={item} key={item.company} />\n            ))}\n          </div>\n          <section>\n            <h3>{currentData.experience[selectedId].jobTitle}</h3>\n            <div>\n              <ContentRow\n                rowTitle={currentLabels.experienceLabels.company}\n                rowContent={currentData.experience[selectedId].company}\n              />\n              <ContentRow\n                rowTitle={currentLabels.experienceLabels.companySite}\n                rowContent={\n                  <a href={currentData.experience[selectedId].url}>{currentData.experience[selectedId].url}</a>\n                }\n              />\n              <ContentRow\n                rowTitle={currentLabels.experienceLabels.location}\n                rowContent={currentData.experience[selectedId].location}\n              />\n              <ContentRow\n                rowTitle={currentLabels.experienceLabels.industry}\n                rowContent={currentData.experience[selectedId].industry}\n              />\n              <ContentRow\n                rowTitle={currentLabels.experienceLabels.description}\n                rowContent={<p>{currentData.experience[selectedId].description}</p>}\n              />\n              <ContentRow\n                rowTitle={currentLabels.experienceLabels.techStack}\n                rowContent={currentData.experience[selectedId].technologies.map((item) => (\n                  <Badge key={item.name}>{item.name}</Badge>\n                ))}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useContext } from 'react';\nimport { AppContext } from '../../context/AppContext';\nimport { LANGUAGE } from '../../definitions/data.interfaces';\nimport styles from './Header.module.scss';\n\nexport interface HeaderProps {\n  onLanguageChange: (lang: LANGUAGE) => void;\n}\n\nexport const Header: React.FC<HeaderProps> = ({ onLanguageChange }: HeaderProps) => {\n  const { personalData, currentLanguage } = useContext(AppContext);\n  const currentData = personalData[currentLanguage];\n  const languages = Object.values<string>(LANGUAGE) || [];\n\n  const handleClick = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    onLanguageChange((e.currentTarget.getAttribute('data-lang') || '') as LANGUAGE);\n  };\n\n  const SwitchButton = React.memo<{\n    currLanguage: string;\n    language: string;\n    handleClick: (e: React.MouseEvent<HTMLElement>) => void;\n  }>(function SwitchButton({ currLanguage, language, handleClick }) {\n    return (\n      <button className={language === currLanguage ? styles.active : ''} data-lang={language} onClick={handleClick}>\n        {language}\n      </button>\n    );\n  });\n\n  if (!currentData) {\n    return <>Loading...</>;\n  }\n\n  return (\n    <div className={styles.header}>\n      <div className={styles.headerWrapper}>\n        <div className={styles.headerTitle}>\n          <h1>{`${currentData.person.firstName} ${currentData.person.lastName} `}</h1>\n          <small>{currentData.person.jobTitle}</small>\n        </div>\n        <div className={styles.langSwitcher}>\n          <img src={`/img/${currentLanguage}.png`} alt={currentLanguage} title={currentLanguage} />\n          {languages.map((language, index) => (\n            <SwitchButton currLanguage={language} language={language} handleClick={handleClick} key={index} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { AppContext, DEFAULT_APP_CONTEXT } from './context/AppContext';\nimport { LANGUAGE, PersonData, Skill } from './definitions/data.interfaces';\nimport { fetchPersonData, fetchSkillLabels } from './api/internalAPI';\nimport { Contacts } from './containers/Contacts/Contacts';\nimport { Skills } from './containers/Skills/Skills';\nimport { Experience } from './containers/Experience/Experience';\nimport { Header } from './containers/Header/Header';\nimport { Projects } from './containers/Projects/Projects';\nimport styles from './App.module.scss';\n\nconst App: React.FC = () => {\n  const [currentLanguage, setCurrentLanguage] = useState<LANGUAGE>(DEFAULT_APP_CONTEXT.currentLanguage);\n  const [personalData, setPersonalData] = useState<{ [language: string]: PersonData | undefined }>(DEFAULT_APP_CONTEXT.personalData!);\n  const [skills, setSkills] = useState<Skill[]>(DEFAULT_APP_CONTEXT.skills);\n\n  const handleChange = (selectedLanguage: LANGUAGE) => {\n    if (selectedLanguage === currentLanguage) {\n      return;\n    }\n    setCurrentLanguage(selectedLanguage);\n  };\n\n  const updatePersonData = useCallback(async  () => {\n    const personData  = await fetchPersonData(currentLanguage as string);\n    setPersonalData({ ...personalData, [currentLanguage]: personData });\n  }, [currentLanguage, personalData]);\n\n  useEffect(() => {\n    async function init() {\n      updatePersonData();\n      const skills = await fetchSkillLabels();\n      setSkills(skills);\n    }\n    init();\n  },[updatePersonData]);\n\n  useEffect(() => {\n    if (!personalData[currentLanguage]) {\n      updatePersonData();\n    }\n  }, [personalData, currentLanguage, updatePersonData]);\n\n  return (\n    <AppContext.Provider value={{\n      currentLanguage,\n      personalData,\n      skills,\n      labels: DEFAULT_APP_CONTEXT.labels\n    }}>\n      <div className={styles.App}>\n        <Header onLanguageChange={handleChange} />\n        <Contacts />\n        <Experience />\n        {false && <Projects />}\n        <Skills />\n      </div>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}