{"version":3,"sources":["components/smart-components/Experience/Experience.module.scss","components/dumb-components/Media-card/MediaCard.module.scss","components/dumb-components/Badge/Badge.module.scss","App.module.scss","definitions/data.interfaces.ts","assets/data/profile.ts","AppContext.ts","components/dumb-components/Media-card/MediaCard.tsx","components/smart-components/Experience/Experience.tsx","constants.ts","components/smart-components/Header/Header.tsx","components/smart-components/Projects/Projects.tsx","components/dumb-components/Badge/Badge.tsx","components/smart-components/Skills/Skills.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SkillCategory","SKILLS_SET","name","skillCategory","FRONTEND","BACKEND","DEFAULT_APP_CONTEXT","personalData","person","firstName","lastName","jobTitle","experience","company","companyIcon","url","industry","description","location","technologies","projects","skills","lang","AppContext","React","createContext","MediaCard","type","className","bgUrl","inlineStyle","backgroundImage","backgroundPosition","backgroundRepeat","styles","mediaCard","style","Experience","Consumer","experienceSection","verticalStepper","map","item","card","key","Header","Projects","Badge","children","badge","Skills","App","Provider","value","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee1185a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"verticalStepper\":\"Experience_verticalStepper__OBk3o\",\"card\":\"Experience_card__4PJp3\",\"experienceSection\":\"Experience_experienceSection__2nv7d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mediaCard\":\"MediaCard_mediaCard__32Ulk\",\"positive\":\"MediaCard_positive__1GSaf\",\"negative\":\"MediaCard_negative__3tFFt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"badge\":\"Badge_badge__2QfYo\",\"positive\":\"Badge_positive__1lJTZ\",\"negative\":\"Badge_negative__2aq5L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"App-header\":\"App_App-header__3nnPn\",\"App-link\":\"App_App-link__TRj1P\"};","export type ElementType = 'positive' | 'negative';\n\nexport enum SkillCategory {\n  FRONTEND = 'frontend',\n  BACKEND = 'backend',\n  DEVELOPMENT = 'development',\n  OTHERS = 'others',\n}\n\nexport interface Experience {\n  company: string;\n  companyIcon: string;\n  url?: string;\n  industry: string;\n  jobTitle: string;\n  description: string;\n  location: string;\n  technologies: Skill[];\n}\n\nexport interface Project {\n  name: string;\n  projectIcon: string;\n  description: string;\n  url: string;\n}\n\nexport interface Skill {\n  name: string;\n  skillCategory: SkillCategory;\n}\n\nexport interface PersonData {\n  person: {\n    firstName: string;\n    lastName: string;\n    jobTitle: string;\n  };\n  experience: Experience[];\n  projects: Project[];\n  skills: Skill[];\n}\n","import { PersonData, Skill, SkillCategory } from '../../definitions/data.interfaces';\n\nexport const SKILLS_SET: Skill[] = [\n  {\n    name: 'JavaScript',\n    skillCategory: SkillCategory.FRONTEND,\n  },\n  {\n    name: 'TypeScript',\n    skillCategory: SkillCategory.FRONTEND,\n  },\n\n  {\n    name: 'Angular/React/Vue/Ember',\n    skillCategory: SkillCategory.FRONTEND,\n  },\n\n  {\n    name: 'JAVA',\n    skillCategory: SkillCategory.BACKEND,\n  },\n\n  {\n    name: 'PHP',\n    skillCategory: SkillCategory.BACKEND,\n  },\n  {\n    name: 'Yii2/Laravel',\n    skillCategory: SkillCategory.BACKEND,\n  },\n];\n\nexport const PERSONAL_DATA: PersonData = {\n  person: {\n    firstName: 'Maksim',\n    lastName: 'Tsvetkov',\n    jobTitle: 'Senor Frontend Engineer',\n  },\n  experience: [\n    {\n      company: 'Avtotor',\n      companyIcon: 'avtotor-logo.png',\n      url: 'http://www.avtotor.ru/',\n      industry: 'Automotive industry',\n      jobTitle: 'Lead software engineer / Chief of department',\n      description: '',\n      location: 'Russia, Kaliningrad',\n      technologies: [SKILLS_SET[0], SKILLS_SET[3]],\n    },\n    {\n      company: 'GS Group',\n      companyIcon: 'gsgroup-logo.png',\n      url: 'https://en.gs-group.com/',\n      industry: 'Automotive industry',\n      jobTitle: 'Frontend developer',\n      description: '',\n      location: 'Russia, Gusev',\n      technologies: [SKILLS_SET[0], SKILLS_SET[1], SKILLS_SET[2]],\n    },\n    {\n      company: 'Kuehne-Nagel',\n      companyIcon: 'kuehne-nagel-logo.png',\n      url: 'https://ee.kuehne-nagel.com/en_gb/',\n      industry: 'Automotive industry',\n      jobTitle: 'Fullstack developer / Senior Frontend engineer',\n      description: '',\n      location: 'Estonia, Tallinn',\n      technologies: [SKILLS_SET[0], SKILLS_SET[3]],\n    },\n    {\n      company: 'Veriff',\n      companyIcon: 'veriff-logo.png',\n      url: 'https://www.veriff.com/',\n      industry: 'Automotive industry',\n      jobTitle: 'Senior Frontend engineer',\n      description: '',\n      location: 'Estonia, Tallinn',\n      technologies: [SKILLS_SET[0], SKILLS_SET[1], SKILLS_SET[2]],\n    },\n  ],\n  projects: [],\n  skills: SKILLS_SET,\n};\n","import React from 'react';\nimport { PERSONAL_DATA } from './assets/data/profile';\nimport { PersonData } from './definitions/data.interfaces';\n\nexport interface AppContext {\n  personalData: PersonData;\n  lang: string;\n}\n\nexport const DEFAULT_APP_CONTEXT: AppContext = {\n  personalData: PERSONAL_DATA,\n  lang: 'en',\n};\n\nexport const AppContext = React.createContext(DEFAULT_APP_CONTEXT);\n","import React from 'react';\nimport { ElementType } from '../../../definitions/data.interfaces';\nimport styles from './MediaCard.module.scss';\n\nexport interface MediaCardProps extends React.HTMLAttributes<HTMLElement> {\n  type?: ElementType;\n  bgUrl?: string;\n}\n\nexport const MediaCard: React.FC<MediaCardProps> = ({ type = 'positive', className = '', bgUrl }: MediaCardProps) => {\n  const inlineStyle = {\n    backgroundImage: `url('${bgUrl}')`,\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n  };\n  return <div className={`${styles.mediaCard} ${styles[type]} ${className}`} style={inlineStyle} />;\n};\n","import React from 'react';\nimport { AppContext } from '../../../AppContext';\nimport { Experience as ExperienceItem } from '../../../definitions/data.interfaces';\nimport styles from './Experience.module.scss';\nimport { MediaCard } from '../../dumb-components/Media-card/MediaCard';\nimport { IMG_URL } from '../../../constants';\n\nexport const Experience: React.FC = () => {\n  return (\n    <AppContext.Consumer>\n      {({ personalData }) => (\n        <div className={styles.experienceSection}>\n          <h3>Experience</h3>\n          <div className={styles.verticalStepper}>\n            {personalData.experience.map((item: ExperienceItem) => (\n              <div className={styles.card} key={item.company}>\n                <MediaCard bgUrl={`${IMG_URL}${item.companyIcon}`} />\n              </div>\n            ))}\n          </div>\n          <section>\n            <h4>\n              Company: <small>Avtotor</small>\n            </h4>\n          </section>\n        </div>\n      )}\n    </AppContext.Consumer>\n  );\n};\n","export const IMG_URL = '/img/';\n","import React from 'react';\nimport { AppContext } from '../../../AppContext';\n\nexport const Header: React.FC = () => {\n  return (\n    <AppContext.Consumer>\n      {({ personalData }) => (\n        <div>\n          <h1>{`${personalData.person.firstName} ${personalData.person.lastName}`}</h1>\n          <p>{personalData.person.jobTitle}</p>\n        </div>\n      )}\n    </AppContext.Consumer>\n  );\n};\n","import React from 'react';\nimport { AppContext } from '../../../AppContext';\n\nexport const Projects: React.FC = () => {\n  return (\n    <AppContext.Consumer>\n      {({ personalData }) => (\n        <div>\n          <h3>Projects</h3>\n          <div>\n            {personalData.skills.map((item) => (\n              <div key={item.name}>{item.name}</div>\n            ))}\n          </div>\n        </div>\n      )}\n    </AppContext.Consumer>\n  );\n};\n","import React from 'react';\nimport { ElementType } from '../../../definitions/data.interfaces';\nimport styles from './Badge.module.scss';\n\nexport interface BadgeProps extends React.HTMLAttributes<HTMLElement> {\n  type?: ElementType;\n}\n\nexport const Badge: React.FC<BadgeProps> = ({ type = 'negative', className = '', children }: BadgeProps) => {\n  return <div className={`${styles.badge} ${styles[type]} ${className}`}>{children}</div>;\n};\n","import React from 'react';\nimport { AppContext } from '../../../AppContext';\nimport { Badge } from '../../dumb-components/Badge/Badge';\n\nexport const Skills: React.FC = () => {\n  return (\n    <AppContext.Consumer>\n      {({ personalData }) => (\n        <div>\n          <h3>Skills</h3>\n          <div>\n            {personalData.skills.map((item) => (\n              <Badge key={item.name}>{item.name}</Badge>\n            ))}\n          </div>\n        </div>\n      )}\n    </AppContext.Consumer>\n  );\n};\n","import React from 'react';\nimport styles from './App.module.scss';\nimport { Experience, Header, Projects, Skills } from './components';\nimport { AppContext, DEFAULT_APP_CONTEXT } from './AppContext';\n\nconst App: React.FC = () => {\n  return (\n    <AppContext.Provider value={DEFAULT_APP_CONTEXT}>\n      <div className={styles.App}>\n        <Header />\n        <Experience />\n        <Projects />\n        <Skills />\n      </div>\n    </AppContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}